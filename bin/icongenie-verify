#!/usr/bin/env node

const parseArgs = require('minimist')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    m: 'mode',
    p: 'profile',
    h: 'help'
  },
  boolean: ['h'],
  default: {
    m: 'all'
  }
})

if (argv.help) {
  console.log(`
  Description
    Verifies your Quasar App's icons for all installed modes.

  Usage
    $ icongenie verify

  Options
    --mode, -m  For which Quasar mode to generate icon files
                (if no mode is specified, it detects what modes
                are installed and verifies all them)
                  [all|spa|ssr|pwa|cordova|capacitor|electron|bex]

    --profile   Use a JSON config file to extract the assets list.
                Structure of the file:
                  {
                    assets: [ /* list of assets */ ], // << must contain it!
                    params: { /* not important, are ignored here */ }
                  }

    --help, -h  Displays this message
  `)
  process.exit(0)
}

const fs = require('fs')
const { green, red, underline } = require('chalk')

const { appDir } = require('../lib/app-paths')
const { getAllModes, Mode } = require('../lib/modes')
const { PNG_STATUS, validatePng } = require('../lib/validate-png')

function getFileStatus (file) {
  if (!fs.existsSync(file.absoluteName)) {
    return red('ERROR: missing!')
  }

  if (file.handler === 'png' || file.handler === 'splashscreen') {
    const status = validatePng(file.absoluteName, file.resolution)

    if (status === PNG_STATUS.FORMAT_ERROR) {
      return red('ERROR: not a png!')
    }

    if (status === PNG_STATUS.RESOLUTION_ERROR) {
      return red('ERROR: incorrect resolution!')
    }
  }

  return green('OK')
}

function printFiles (mode) {
  console.log(` ${green(underline(`Mode ${mode.name.toUpperCase()}`))} \n`)

  mode.files.forEach(file => {
    console.log(` ${getFileStatus(file)} - ${file.relativeName}`)
  })

  console.log()
}

const parseArgv = require('../lib/parse-argv')
parseArgv(argv, [ 'mode', 'profile' ])

const modes = argv.mode !== 'all'
  ? [ new Mode(argv.mode, appDir) ]
  : getAllModes(appDir)

modes.forEach(mode => {
  if (mode.isInstalled) {
    printFiles(mode)
  }
})
