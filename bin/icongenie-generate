#!/usr/bin/env node

const parseArgs = require('minimist')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    i: 'icon',
    s: 'splashscreen',
    m: 'mode',
    q: 'quality',
    b: 'bgcolor', // Cordova/Capacitor mode only
    t: 'type',    // Cordova/Capacitor mode only
    c: 'color',   // theme color
    h: 'help'
  },
  boolean: ['h'],
  string: ['i', 's', 'm', 'speed', 'b', 't'],
  default: {
    m: 'all',
    q: 5,
    b: '#000074',
    t: 'pure',
    c: '#1976D2'
  }
})

if (argv.help) {
  console.log(`
  Description
    Starts the app in development mode (hot-code reloading, error
    reporting, etc)

  Usage
    # generate icons for all installed Quasar modes
    $ icongenie generate -i /path/to/app-icon.png
    $ icongenie g -i /path/to/app-icon.png

    # generate for (as example) PWA mode only
    $ icongenie generate -m pwa -i /path/to/app-icon.png

    # generate for (as example) Capacitor mode only
    $ icongenie g -m capacitor -i /path/to/app-icon.png -s /path/to/app-splashscreen.png

  Options
    --mode, -m          For which Quasar mode to generate icon files
                        (if no mode is specified, it detects what modes
                        are installed and generates for all them)
                          [all|spa|ssr|pwa|cordova|capacitor|electron|bex]

    --icon, -i          Path to source file for icons; must be:
                          - a .png file
                          - have resolution: 1240x1240px
                          - with transparency
    --quality           Quality of the files [1 - 10] (default: 5)
                          - higher quality --> bigger filesize, slower
                          - lower quality  --> smaller filesize, faster
    --color, -c         Theme color for the SVGs
                          (default: '#1976D2')

    --help, -h          Displays this message

    Only for Cordova/Capacitor mode:
    --splashscreen, -s  Path to source file for splashscreens; must be:
                          - a .png file
                          - have resolution: 2436x2436px
                          - transparency is optional
    --type, -t          Build strategy for splashscreens: (default is "pure")
                          pure    => Use app-splashscreen.png as-is
                          bg      => Generate with background color and icon
                          overlay => Overlay app-icon.png centered on top of
                                     app-splashscreen.png
    --bgcolor, -b       Background color for icons and splashscreen
                          - hex format (not hexa); no transparency allowed
                          - default: #000074
  `)
  process.exit(0)
}

const { appDir } = require('../lib/app-paths')
const parseArgv = require('../lib/parse-argv')

parseArgv(argv, [
  'mode', 'quality', 'type', 'bgcolor', 'icon', 'splashscreen'
])

const { getAllModes, Mode } = require('../lib/modes')

let files = []
const modes = argv.mode !== 'all'
  ? [ new Mode(argv.mode, appDir) ]
  : getAllModes(appDir)

modes.forEach(mode => {
  if (mode.isInstalled) {
    files = files.concat(mode.files)
  }
})

const { green } = require('chalk')
const generateFile = require('../lib/generate-file')
const getGenerateOptions = require('../lib/get-generate-options')

const generateOptions = getGenerateOptions(argv)

console.log(` Generating files with the following options:
 ===========================================
 Quasar mode........... ${green(argv.mode)}
 ${green('Quality level')}......... ${green(`${argv.quality}/12`)}
 SVG theme color....... ${green(argv.color)}
 Splashscreen bg....... ${green(argv.bgcolor)}
 ===========================================
`)

const filePaths = {}
files.forEach(file => {
  // unique files only (modes share files)
  if (filePaths[file.absoluteName] === void 0) {
    filePaths[file.absoluteName] = true
    generateFile(file, generateOptions)
  }
})
