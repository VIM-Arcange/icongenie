#!/usr/bin/env node

const parseArgs = require('minimist')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    i: 'icon',
    s: 'splashscreen',
    m: 'mode',
    a: 'algorithm',
    b: 'bgcolor', // Cordova/Capacitor mode only
    t: 'type',    // Cordova/Capacitor mode only
    h: 'help'
  },
  boolean: ['h'],
  string: ['i', 's', 'm', 'a', 'b', 't'],
  default: {
    m: 'all',
    a: 'pngcrush',
    b: '#000074',
    t: 'pure'
  }
})

if (argv.help) {
  console.log(`
  Description
    Starts the app in development mode (hot-code reloading, error
    reporting, etc)

  Usage
    # generate icons for all installed Quasar modes
    $ icongenie generate -i /path/to/app-icon.png
    $ icongenie g -i /path/to/app-icon.png

    # generate for (as example) PWA mode only
    $ icongenie generate -m pwa -i /path/to/app-icon.png

    # generate for (as example) Capacitor mode only
    $ icongenie generate -m capacitor -T ios
          -i /path/to/app-icon.png -s /path/to/app-splashscreen.png

  Options
    --mode, -m          For which Quasar mode to generate icon files
                        (if no mode is specified, it detects what modes
                        are installed and generates for all them)
                          [all|spa|ssr|pwa|cordova|capacitor|electron|bex]

    --icon, -i          Path to source file for icons; must be:
                          - a .png file
                          - have resolution: 1240x1240px
                          - with transparency
    --algorithm, -a     Minify algorithm to use: (default is "pngcrush")
                          pngquant  => quality: lossy      | time: 1x
                          optipng   => quality: lossless+  | time: 4x
                          pngcrush  => quality: lossless+  | time: 10x
                          zopfli    => quality: lossless++ | time: 80x

    --help, -h          Displays this message

    Only for Cordova/Capacitor mode:
    --splashscreen, -s  Path to source file for splashscreens; must be:
                          - a .png file
                          - have resolution: 2436x2436px
                          - transparency is optional
    --type, -t          Build strategy for splashscreens: (default is "pure")
                          pure    => Use app-splashscreen.png as-is
                          bg      => Generate with background color and icon
                          overlay => Overlay app-icon.png centered on top of
                                     app-splashscreen.png
    --bgcolor, -b       Background color for icons and splashscreen
                          - no transparency allowed
                          - default: #000074
  `)
  process.exit(0)
}

const parseArgv = require('../lib/ensure-argv')
parseArgv(argv, [ 'mode', 'icon', 'splashscreen', 'algorithm', 'type', 'bgcolor' ])

const { join } = require('path')
const { log, warn } = require('../lib/logger')

const { appDir } = require('../lib/app-paths')
const { getAllModes, Mode } = require('../lib/modes')

const modes = argv.mode !== 'all'
  ? [ new Mode(argv.mode, appDir) ]
  : getAllModes(appDir)

modes.forEach(mode => {
  if (mode.isInstalled) {
    showLog(mode)
  }
})
